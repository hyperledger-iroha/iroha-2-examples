use eyre::{Error, WrapErr};
use iroha_config::client::Configuration;
use std::fs::File;

fn main() {
    let config = load_configuration().expect("Configuration should be loading normally");
    account_registration_test(&config)
        .expect("Account registration example is expected to work correctly");
    println!("Account registration example works!");
}

fn load_configuration() -> Result<Configuration, Error> {
    // #region rust_config_load
    let config_loc = "./config.json";
    let file = File::open(config_loc)
        .wrap_err(format!(
            "Unable to load the configuration file at `{}`",
            config_loc
        ))
        .expect("Config file is loading normally.");
    let config: Configuration = serde_json::from_reader(file)
        .wrap_err(format!("Failed to parse `{}`", config_loc))
        .expect("Verified in tests");
    // #endregion rust_config_load

    // Return the configuration normally
    Ok(config)
}

// This function imitates the user sharing a public key.
// It generates a new public key for a new account.
// Normally, it is generated by Kagami.
fn get_key_from_white_rabbit() -> iroha_crypto::PublicKey {
    use iroha_crypto::KeyPair;

    let (public_key, _) = KeyPair::generate()
        .expect("Failed to generate KeyPair")
        .into();

    public_key
}

fn account_registration_test(config: &Configuration) -> Result<(), Error> {
    // #region register_account_crates
    use iroha_client::client::Client;
    use iroha_data_model::{
        metadata::UnlimitedMetadata,
        prelude::{Account, AccountId, InstructionBox, RegisterBox},
    };
    // #endregion register_account_crates

    // Create an Iroha client
    let iroha_client: Client = Client::new(&config)?;

    // #region register_account_create
    // Create an AccountId instance by providing the account and domain name
    let account_id: AccountId = "white_rabbit@looking_glass"
        .parse()
        .expect("Valid, because the string contains no whitespace, has a single '@' character and is not empty after");
    // #endregion register_account_create

    // Use a public key that was shared by the white_rabbit.
    let public_key = get_key_from_white_rabbit();

    // #region register_account_generate
    // Generate a new account
    let create_account = RegisterBox::new(Account::new(account_id, [public_key]));
    // #endregion register_account_generate

    // #region register_account_prepare_tx
    // Prepare a transaction using the
    // Account's RegisterBox
    let metadata = UnlimitedMetadata::new();
    let instructions: Vec<InstructionBox> = vec![create_account.into()];
    let tx = iroha_client.build_transaction(instructions, metadata)?;
    // #endregion register_account_prepare_tx

    // #region register_account_submit_tx
    // Submit a prepared account registration transaction
    iroha_client.submit_transaction(&tx)?;
    // #endregion register_account_submit_tx

    // Finish the test successfully
    Ok(())
}
