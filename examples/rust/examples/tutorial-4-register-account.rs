use eyre::Result;
use iroha_2_examples::load_client;
use iroha_client::client::Client;
use iroha_data_model::prelude::*;
use iroha_data_model::query::account::model::FindAllAccounts;

// This function imitates the user sharing a public key.
// It generates a new public key for a new account.
// Normally, it is generated by Kagami.
fn get_key_from_white_rabbit() -> Result<PublicKey> {
    let (public_key, _) = iroha_crypto::KeyPair::generate()?.into();
    Ok(public_key)
}

fn main() -> Result<()> {
    let client: Client = load_client("./config.json")?;

    // Create an AccountId instance by providing the account and domain name
    let account_id: AccountId = "white_rabbit@looking_glass".parse().expect(
        // TODO: do we need it here?
        r#"
          Valid, because the string contains no whitespace,
          has a single '@' character and is not empty after
        "#,
    );

    // Use a public key that was shared by the white_rabbit.
    let public_key = get_key_from_white_rabbit()?;

    // Generate a new account
    let register = RegisterBox::new(Account::new(account_id.clone(), [public_key]));
    client.submit_blocking(register)?;

    let accounts = client
        .request(FindAllAccounts)?
        .collect::<Result<Vec<_>, _>>()?;
    assert!(accounts.iter().find(|x| x.id == account_id).is_some());

    Ok(())
}
